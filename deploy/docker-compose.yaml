# services : mysql, redis, app    /   volumes

# version: '3.8' /버전 검토 필요

services:
  mysql:
    build:
      context: ./mysql  # Dockerfile 위치 지정, 현재 디렉토리의 mysql 폴더에서 찾습니다.
    restart: always  # 컨테이너가 중지되면 항상 자동으로 재시작합니다.
    container_name: mysql  # 컨테이너의 이름을 mysql로 설정합니다.
    environment:  # 환경 변수 설정
      - MYSQL_ROOT_PASSWORD=1234  # MySQL root 사용자의 비밀번호 설정
      - MYSQL_DATABASE=user  # 기본적으로 생성할 데이터베이스 이름
    command:
      - --character-set-server=utf8mb4  # 문자 인코딩 설정
      - --collation-server=utf8mb4_unicode_ci  # 문자 정렬 설정
    ports:
      - "3307:3306"  # 호스트의 3307 포트와 컨테이너의 3306 포트를 연결
    volumes:
      - mysql_data:/var/lib/mysql  # mysql_data 볼륨을 MySQL 데이터 저장용으로 사용
    networks:
      - backend # backend 네트워크에 연결

  redis:
    image: redis:latest  # 최신 Redis 이미지 사용
    restart: always  # 컨테이너가 중지되면 항상 자동으로 재시작합니다.
    container_name: redis  # 컨테이너의 이름을 redis로 설정합니다.
    ports:
      - "6378:6379"  # 호스트의 6378 포트와 컨테이너의 6379 포트를 연결
    volumes:
      - redis_data:/data  # redis_data 볼륨을 Redis 데이터 저장용으로 사용
    networks:
      - backend # backend 네트워크에 연결

  app:
    build:
      context: ../  # Dockerfile 위치 지정, 상위 디렉토리에서 찾습니다.
      dockerfile: deploy/springboot/Dockerfile  # 사용할 Dockerfile의 상대 경로
    restart: always  # 컨테이너가 중지되면 항상 자동으로 재시작합니다.
    container_name: my-springboot-app  # 컨테이너의 이름을 my-springboot-app로 설정합니다.
    ports:
      - "8080:8080"  # 호스트의 8080 포트와 컨테이너의 8080 포트를 연결
    environment:  # 환경 변수 설정
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/user?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true  # Spring Boot 앱이 사용할 MySQL 접속 정보
      - SPRING_DATASOURCE_USERNAME=root  # 데이터베이스 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=1234  # 데이터베이스 비밀번호
      - SPRING_REDIS_HOST=redis  # Redis 서버 호스트명
    depends_on:
      - mysql  # app 서비스는 mysql 서비스가 먼저 실행된 후에 시작되어야 합니다.
    networks:
      - backend # backend 네트워크에 연결

volumes:
  mysql_data: # MySQL 데이터를 저장할 볼륨 정의
    driver: local
    #driver_opts: #옵션을 통해 특정 디렉토리에 데이터를 저장하는 옵션 설정, NFS, AWS EBS, GCE 등 다른 저장소도 설정 가능. 특정 디렉토리로 설정하려면 # - 주석을 제거하여 사용할 수 있습니다
    #  type: none
    #  o: bind
    #  device: /path/to/host/directory # 위 디렉토리 주소에 mysql data가 저장됩니다
  redis_data: # Redis 데이터를 저장할 볼륨 정의
    driver: local 

networks:
  backend:
    driver: bridge # 브리지 네트워크를 사용하여 서비스 간 통신을 관리
